
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    upstream flask {
        #server  127.0.0.1:9999;
        server  unix:///app/BackServer/mysite.sock;
    }
    server {
        listen       8080;
        server_name  127.0.0.1;    # 这里填写你的云服务器ip地址或127.0.0.1（本地测试）
	
        charset     utf-8;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

	location / {
            
		    #root   C:\Users\Administrator\www\dist;  # 这里是打包后dist放在服务器上的路径
        	root    /usr/share/nginx/html/dist;   # 通过docker部署的时候需要将dist文件放到nginx容器的该目录下
            index  index.html index.htm;
    		try_files	$uri $uri/ /index.html;  # 这个是为了避免前端刷新的时候走404
  	}
     	location /api {
			#proxy_set_header X-Real-IP $remote_addr;
            include uwsgi_params;
		    #proxy_redirect off;
			#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#proxy_set_header Host $http_host;
            uwsgi_pass  spider-flask:9999;
			#proxy_set_header X-NginX-Proxy true;
			# proxy_pass http://127.0.0.1:9999/;  # 前端请求带/api被重定向到后端的端口;如果通过docker部署了后端容器，则添加后端的容器内ip
            #proxy_pass http://spider-flask:9999/;
            #proxy_pass  flask;
        }
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            # root  html;
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
